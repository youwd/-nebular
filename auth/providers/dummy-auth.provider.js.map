{"version":3,"file":"dummy-auth.provider.js","sourceRoot":"","sources":["../../../../.ng_build/auth/providers/dummy-auth.provider.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,EAAE,IAAI,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAExD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;;IAQzB,uCAAsB;;;8BAER;YACnD,KAAK,EAAE,IAAI;SACZ;;;IAED,0CAAY,GAAZ,UAAa,IAAU;QACrB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9C,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;IAED,sCAAQ,GAAR,UAAS,IAAU;QACjB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9C,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;IAED,6CAAe,GAAf,UAAgB,IAAU;QACxB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9C,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;IAED,2CAAa,GAAb,UAAc,IAAU;QACtB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9C,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;IAED,oCAAM,GAAN,UAAO,IAAU;QACf,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aAC9C,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;IAES,+CAAiB,GAA3B,UAA4B,IAAU;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,EAC3B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAC7B,IAAI,EACJ,CAAC,uBAAuB,CAAC,CAAC,CAAC;SAC9B;QAED,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,yBAAyB,CAAC,CAAC,CAAC;KACnG;;gBAzCF,UAAU;;;;8BAZX;EAayC,sBAAsB;SAAlD,mBAAmB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of as observableOf } from 'rxjs/observable/of';\n\nimport { NbAuthResult } from '../services/auth.service';\nimport { NbAbstractAuthProvider } from './abstract-auth.provider';\n\nexport interface NbDummyAuthProviderConfig {\n  delay?: number;\n  alwaysFail?: boolean;\n}\n\n@Injectable()\nexport class NbDummyAuthProvider extends NbAbstractAuthProvider {\n\n  protected defaultConfig: NbDummyAuthProviderConfig = {\n    delay: 1000,\n  };\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .delay(this.getConfigValue('delay'));\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .delay(this.getConfigValue('delay'));\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .delay(this.getConfigValue('delay'));\n  }\n\n  resetPassword(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .delay(this.getConfigValue('delay'));\n  }\n\n  logout(data?: any): Observable<NbAuthResult> {\n    return observableOf(this.createDummyResult(data))\n      .delay(this.getConfigValue('delay'));\n  }\n\n  protected createDummyResult(data?: any): NbAuthResult {\n    if (this.getConfigValue('alwaysFail')) {\n      return new NbAuthResult(false,\n        this.createFailResponse(data),\n        null,\n        ['Something went wrong.']);\n    }\n\n    return new NbAuthResult(true, this.createSuccessResponse(data), '/', ['Successfully logged in.']);\n  }\n}\n"]}