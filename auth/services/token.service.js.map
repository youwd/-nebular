{"version":3,"file":"token.service.js","sourceRoot":"","sources":["../../../../.ng_build/auth/services/token.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,OAAO,EAAE,EAAE,IAAI,YAAY,EAAE,MAAM,oBAAoB,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACrD,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AACzC,OAAO,EAAE,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAE7C,OAAO,EAAE,qBAAqB,EAAE,2BAA2B,EAAE,MAAM,iBAAiB,CAAC;AACrF,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;;;;;;qBAQhD,EAAE;;IAE5B,oCAAQ,GAAR,UAAS,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACpB;IAED;;;OAGG;;;;;IACH,oCAAQ;;;;IAAR;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;KACnB;;gBAfF,UAAU;;;;4BAdX;;SAea,iBAAiB;;;;;IAqBM,kCAAiB;;;;IAEnD;;;;OAIG;;;;;;IACH,mCAAU;;;;;IAAV;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,eAAa,IAAI,CAAC,KAAK,6DAA0D,CAAC,CAAC;SACpG;QAED,IAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,eAAa,IAAI,CAAC,KAAK,mDAAgD,CAAC,CAAC;SAC1F;QAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC5B;IAED;;;OAGG;;;;;IACH,wCAAe;;;;IAAf;QACE,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,CAAC;SACb;QAED,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC;KACb;;gBArCF,UAAU;;;;yBAnCX;EAoCoC,iBAAiB;SAAxC,cAAc;;;;;;;;;;;;;;;;;;;;;IAsFzB,wBAAqD,SACM;QAD3D,iBAKC;QALoD,YAAO,GAAP,OAAO;QACD,iBAAY,GAAZ,YAAY;6BA1BxC;YAC7B,KAAK,EAAE;gBACL,GAAG,EAAE,gBAAgB;gBAErB,MAAM,EAAE;oBACN,IAAM,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1E,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;oBACvC,MAAM,CAAC,YAAY,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;iBACxC;gBAED,MAAM,EAAE,UAAC,KAAiC;oBACxC,IAAM,GAAG,GAAG,KAAK,YAAY,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;oBAC1E,YAAY,CAAC,OAAO,CAAC,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,CAAC;oBAC5D,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBAC3B;gBAED,OAAO,EAAE;oBACP,YAAY,CAAC,UAAU,CAAC,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC1D,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;iBAC3B;aACF;SACF;sBACuB,EAAE;sBACe,IAAI,eAAe,CAAC,IAAI,CAAC;QAIhE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAExB,IAAI,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAxB,CAAwB,CAAC,CAAC;KACzD;IAED,kCAAS,GAAT,UAAU,MAAW;QACnB,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;KAC1D;IAED,uCAAc,GAAd,UAAe,GAAW;QACxB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KAClD;IAED;;;;OAIG;;;;;;IACH,4BAAG;;;;;IAAH,UAAI,QAAgB;QAApB,iBAQC;QAPC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC;aACjD,IAAI,CACH,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,GAAG,EAAE,EAAV,CAAU,CAAC,EAC3B,GAAG,CAAC,UAAC,KAAwB;YAC3B,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;SAC1B,CAAC,CACH,CAAC;KACL;IAED;;;OAGG;;;;;IACH,4BAAG;;;;IAAH;QACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC;KAC9C;IAED;;;OAGG;;;;;IACH,oCAAW;;;;IAAX;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;KAClC;IAED;;;OAGG;;;;;IACH,8BAAK;;;;IAAL;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAExB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE,CAAC;KAC/C;IAES,qCAAY,GAAtB,UAAuB,KAAwB;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzB;;gBAtFF,UAAU;;;;gDA4BI,MAAM,SAAC,qBAAqB;gBA3G9B,iBAAiB,uBA4Gf,MAAM,SAAC,2BAA2B;;yBA3HjD;;SA+Fa,cAAc","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of as observableOf } from 'rxjs/observable/of';\nimport { switchMap } from 'rxjs/operators/switchMap';\nimport { tap } from 'rxjs/operators/tap';\nimport { share } from 'rxjs/operators/share';\n\nimport { NB_AUTH_OPTIONS_TOKEN, NB_AUTH_TOKEN_WRAPPER_TOKEN } from '../auth.options';\nimport { deepExtend, getDeepFromObject, urlBase64Decode } from '../helpers';\n\n/**\n * Wrapper for simple (text) token\n */\n@Injectable()\nexport class NbAuthSimpleToken {\n\n  protected token: string = '';\n\n  setValue(token: string) {\n    this.token = token;\n  }\n\n  /**\n   * Returns the token value\n   * @returns string\n   */\n  getValue() {\n    return this.token;\n  }\n}\n\n/**\n * Wrapper for JWT token with additional methods.\n */\n@Injectable()\nexport class NbAuthJWTToken extends NbAuthSimpleToken {\n\n  /**\n   * TODO: check for this.token to be not null\n   * Returns payload object\n   * @returns any\n   */\n  getPayload(): any {\n    const parts = this.token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error(`The token ${this.token} is not valid JWT token and must consist of three parts.`);\n    }\n\n    const decoded = urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error(`The token ${this.token} is not valid JWT token and cannot be decoded.`);\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  /**\n   * Returns expiration date\n   * @returns Date\n   */\n  getTokenExpDate(): Date {\n    const decoded = this.getPayload();\n    if (!decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n}\n\n/**\n * Nebular token service. Provides access to the stored token.\n * By default returns NbAuthSimpleToken instance,\n * but you can inject NbAuthJWTToken if you need additional methods for JWT token.\n *\n * @example Injecting NbAuthJWTToken, so that NbTokenService will now return NbAuthJWTToken instead\n * of the default NbAuthSimpleToken\n *\n * ```\n * // import token and service into your AppModule\n * import { NB_AUTH_TOKEN_WRAPPER_TOKEN,  NbAuthJWTToken} from '@nebular/auth';\n *\n * // add to a list of providers\n * providers: [\n *  // ...\n *  { provide: NB_AUTH_TOKEN_WRAPPER_TOKEN, useClass: NbAuthJWTToken },\n * ],\n * ```\n */\n@Injectable()\nexport class NbTokenService {\n\n  protected defaultConfig: any = {\n    token: {\n      key: 'auth_app_token',\n\n      getter: (): Observable<NbAuthSimpleToken> => {\n        const tokenValue = localStorage.getItem(this.getConfigValue('token.key'));\n        this.tokenWrapper.setValue(tokenValue);\n        return observableOf(this.tokenWrapper);\n      },\n\n      setter: (token: string | NbAuthSimpleToken): Observable<null> => {\n        const raw = token instanceof NbAuthSimpleToken ? token.getValue() : token;\n        localStorage.setItem(this.getConfigValue('token.key'), raw);\n        return observableOf(null);\n      },\n\n      deleter: (): Observable<null> => {\n        localStorage.removeItem(this.getConfigValue('token.key'));\n        return observableOf(null);\n      },\n    },\n  };\n  protected config: any = {};\n  protected token$: BehaviorSubject<any> = new BehaviorSubject(null);\n\n  constructor(@Inject(NB_AUTH_OPTIONS_TOKEN) protected options: any,\n              @Inject(NB_AUTH_TOKEN_WRAPPER_TOKEN) protected tokenWrapper: NbAuthSimpleToken) {\n    this.setConfig(options);\n\n    this.get().subscribe(token => this.publishToken(token));\n  }\n\n  setConfig(config: any): void {\n    this.config = deepExtend({}, this.defaultConfig, config);\n  }\n\n  getConfigValue(key: string): any {\n    return getDeepFromObject(this.config, key, null);\n  }\n\n  /**\n   * Sets the token into the storage. This method is used by the NbAuthService automatically.\n   * @param {string} rawToken\n   * @returns {Observable<any>}\n   */\n  set(rawToken: string): Observable<null> {\n    return this.getConfigValue('token.setter')(rawToken)\n      .pipe(\n        switchMap(() => this.get()),\n        tap((token: NbAuthSimpleToken) => {\n          this.publishToken(token);\n        }),\n      );\n  }\n\n  /**\n   * Returns observable of current token\n   * @returns {Observable<NbAuthSimpleToken>}\n   */\n  get(): Observable<NbAuthSimpleToken> {\n    return this.getConfigValue('token.getter')();\n  }\n\n  /**\n   * Publishes token when it changes.\n   * @returns {Observable<NbAuthSimpleToken>}\n   */\n  tokenChange(): Observable<NbAuthSimpleToken> {\n    return this.token$.pipe(share());\n  }\n\n  /**\n   * Removes the token\n   * @returns {Observable<any>}\n   */\n  clear(): Observable<any> {\n    this.publishToken(null);\n\n    return this.getConfigValue('token.deleter')();\n  }\n\n  protected publishToken(token: NbAuthSimpleToken): void {\n    this.token$.next(token);\n  }\n}\n"]}